#!/bin/bash

WORK_DIR=$(pwd)

COMPOSE_OR_RUN=0

CONTAINER_DIRECTORY="${WORK_DIR}/Container"
ROS2_TEST_DIRECTORY="${CONTAINER_DIRECTORY}/ROS2-Test"
ROS2_BASE_DIRECTORY="${CONTAINER_DIRECTORY}/ROS2-Base"
SSH_SERVER_DIRECTORY="${CONTAINER_DIRECTORY}/SSH_Server"

echo ${WORK_DIR}
echo ${CONTAINER_DIRECTORY}

#start_base() {
#    cd ${ROS2_BASE_DIRECTORY} && docker build --network=host -f Dockerfile -t ros2-base .
#}

#start_test() {
#    cd ${ROS2_TEST_DIRECTORY} && docker build --network=host -f Dockerfile -t ros2-test .
#    COMPOSE_OR_RUN=1
#}
#if [ $# -lt 1 ]; then
#    echo "Starting base ros2 image"
#    start_base
#else
#    echo "Starting base ros2 test image"
#    start_test
#fi

#cd ${SSH_SERVER_DIRECTORY} && docker build --network=host -f Dockerfile -t ssh-server .
#cd ${WORK_DIR}

#if [ "${COMPOSE_OR_RUN}" -eq 1 ]; then
#    winpty docker run -v "$(cygpath -w "$(pwd)"):/workspaces/ROS2-WS" -it ros2-test bash
#else
docker compose up -d
if [ $? -eq 0 ]; then
    echo "Docker Compose started successfully. Following logs..."
    # Run Docker Compose logs in the background
    docker compose logs -f ROS2-Base &
    # Optionally capture the PID of the background process
    LOGS_PID=$!
    echo "Docker Compose logs following process started with PID: ${LOGS_PID}"
else
    echo "Docker Compose failed to start. Check the logs for errors."
    exit 1
fi
#fi



# echo "Waiting... "
# get_entrypoint_script_status() {
#     return $(docker exec "ROS2-Base" cat /tmp/entrypoint_done)
# }

# while ! get_entrypoint_script_status; do
#     sleep 5
#     echo "Still waiting... "
# done

# echo "Build complete... "
# sleep 1
# docker exec ROS2-Base bash -c 'rm /tmp/entrypoint_done'



# winpty docker exec -it ROS2 bash
